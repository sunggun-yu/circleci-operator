/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
)

// checks if the CreateWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWebhookRequest{}

// CreateWebhookRequest The parameters for a create webhook request
type CreateWebhookRequest struct {
	// Name of the webhook
	Name string `json:"name"`
	// Events that will trigger the webhook
	Events []string `json:"events"`
	// URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
	Url string `json:"url"`
	// Whether to enforce TLS certificate verification when delivering the webhook
	VerifyTls bool `json:"verify-tls"`
	// Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
	SigningSecret string                    `json:"signing-secret"`
	Scope         CreateWebhookRequestScope `json:"scope"`
}

// NewCreateWebhookRequest instantiates a new CreateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebhookRequest(name string, events []string, url string, verifyTls bool, signingSecret string, scope CreateWebhookRequestScope) *CreateWebhookRequest {
	this := CreateWebhookRequest{}
	this.Name = name
	this.Events = events
	this.Url = url
	this.VerifyTls = verifyTls
	this.SigningSecret = signingSecret
	this.Scope = scope
	return &this
}

// NewCreateWebhookRequestWithDefaults instantiates a new CreateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebhookRequestWithDefaults() *CreateWebhookRequest {
	this := CreateWebhookRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateWebhookRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateWebhookRequest) SetName(v string) {
	o.Name = v
}

// GetEvents returns the Events field value
func (o *CreateWebhookRequest) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *CreateWebhookRequest) SetEvents(v []string) {
	o.Events = v
}

// GetUrl returns the Url field value
func (o *CreateWebhookRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateWebhookRequest) SetUrl(v string) {
	o.Url = v
}

// GetVerifyTls returns the VerifyTls field value
func (o *CreateWebhookRequest) GetVerifyTls() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VerifyTls
}

// GetVerifyTlsOk returns a tuple with the VerifyTls field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetVerifyTlsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VerifyTls, true
}

// SetVerifyTls sets field value
func (o *CreateWebhookRequest) SetVerifyTls(v bool) {
	o.VerifyTls = v
}

// GetSigningSecret returns the SigningSecret field value
func (o *CreateWebhookRequest) GetSigningSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SigningSecret
}

// GetSigningSecretOk returns a tuple with the SigningSecret field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetSigningSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningSecret, true
}

// SetSigningSecret sets field value
func (o *CreateWebhookRequest) SetSigningSecret(v string) {
	o.SigningSecret = v
}

// GetScope returns the Scope field value
func (o *CreateWebhookRequest) GetScope() CreateWebhookRequestScope {
	if o == nil {
		var ret CreateWebhookRequestScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequest) GetScopeOk() (*CreateWebhookRequestScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateWebhookRequest) SetScope(v CreateWebhookRequestScope) {
	o.Scope = v
}

func (o CreateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["events"] = o.Events
	toSerialize["url"] = o.Url
	toSerialize["verify-tls"] = o.VerifyTls
	toSerialize["signing-secret"] = o.SigningSecret
	toSerialize["scope"] = o.Scope
	return toSerialize, nil
}

type NullableCreateWebhookRequest struct {
	value *CreateWebhookRequest
	isSet bool
}

func (v NullableCreateWebhookRequest) Get() *CreateWebhookRequest {
	return v.value
}

func (v *NullableCreateWebhookRequest) Set(val *CreateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebhookRequest(val *CreateWebhookRequest) *NullableCreateWebhookRequest {
	return &NullableCreateWebhookRequest{value: val, isSet: true}
}

func (v NullableCreateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
