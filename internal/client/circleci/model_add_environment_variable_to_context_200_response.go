/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
	"fmt"
)

// AddEnvironmentVariableToContext200Response struct for AddEnvironmentVariableToContext200Response
type AddEnvironmentVariableToContext200Response struct {
	ListEnvironmentVariablesFromContext200ResponseItemsInner *ListEnvironmentVariablesFromContext200ResponseItemsInner
	MessageResponse                                          *MessageResponse
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AddEnvironmentVariableToContext200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ListEnvironmentVariablesFromContext200ResponseItemsInner
	err = json.Unmarshal(data, &dst.ListEnvironmentVariablesFromContext200ResponseItemsInner)
	if err == nil {
		jsonListEnvironmentVariablesFromContext200ResponseItemsInner, _ := json.Marshal(dst.ListEnvironmentVariablesFromContext200ResponseItemsInner)
		if string(jsonListEnvironmentVariablesFromContext200ResponseItemsInner) == "{}" { // empty struct
			dst.ListEnvironmentVariablesFromContext200ResponseItemsInner = nil
		} else {
			return nil // data stored in dst.ListEnvironmentVariablesFromContext200ResponseItemsInner, return on the first match
		}
	} else {
		dst.ListEnvironmentVariablesFromContext200ResponseItemsInner = nil
	}

	// try to unmarshal JSON data into MessageResponse
	err = json.Unmarshal(data, &dst.MessageResponse)
	if err == nil {
		jsonMessageResponse, _ := json.Marshal(dst.MessageResponse)
		if string(jsonMessageResponse) == "{}" { // empty struct
			dst.MessageResponse = nil
		} else {
			return nil // data stored in dst.MessageResponse, return on the first match
		}
	} else {
		dst.MessageResponse = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AddEnvironmentVariableToContext200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AddEnvironmentVariableToContext200Response) MarshalJSON() ([]byte, error) {
	if src.ListEnvironmentVariablesFromContext200ResponseItemsInner != nil {
		return json.Marshal(&src.ListEnvironmentVariablesFromContext200ResponseItemsInner)
	}

	if src.MessageResponse != nil {
		return json.Marshal(&src.MessageResponse)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAddEnvironmentVariableToContext200Response struct {
	value *AddEnvironmentVariableToContext200Response
	isSet bool
}

func (v NullableAddEnvironmentVariableToContext200Response) Get() *AddEnvironmentVariableToContext200Response {
	return v.value
}

func (v *NullableAddEnvironmentVariableToContext200Response) Set(val *AddEnvironmentVariableToContext200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddEnvironmentVariableToContext200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddEnvironmentVariableToContext200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddEnvironmentVariableToContext200Response(val *AddEnvironmentVariableToContext200Response) *NullableAddEnvironmentVariableToContext200Response {
	return &NullableAddEnvironmentVariableToContext200Response{value: val, isSet: true}
}

func (v NullableAddEnvironmentVariableToContext200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddEnvironmentVariableToContext200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
