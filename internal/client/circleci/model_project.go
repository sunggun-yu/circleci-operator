/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project NOTE: The definition of Project is subject to change.
type Project struct {
	// Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.
	Slug string `json:"slug"`
	// The name of the project
	Name string `json:"name"`
	Id   string `json:"id"`
	// The name of the organization the project belongs to
	OrganizationName string `json:"organization_name"`
	// The slug of the organization the project belongs to
	OrganizationSlug string `json:"organization_slug"`
	// The id of the organization the project belongs to
	OrganizationId string         `json:"organization_id"`
	VcsInfo        ProjectVcsInfo `json:"vcs_info"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(slug string, name string, id string, organizationName string, organizationSlug string, organizationId string, vcsInfo ProjectVcsInfo) *Project {
	this := Project{}
	this.Slug = slug
	this.Name = name
	this.Id = id
	this.OrganizationName = organizationName
	this.OrganizationSlug = organizationSlug
	this.OrganizationId = organizationId
	this.VcsInfo = vcsInfo
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetSlug returns the Slug field value
func (o *Project) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Project) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Project) SetSlug(v string) {
	o.Slug = v
}

// GetName returns the Name field value
func (o *Project) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Project) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *Project) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Project) SetId(v string) {
	o.Id = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *Project) GetOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *Project) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *Project) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetOrganizationSlug returns the OrganizationSlug field value
func (o *Project) GetOrganizationSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationSlug
}

// GetOrganizationSlugOk returns a tuple with the OrganizationSlug field value
// and a boolean to check if the value has been set.
func (o *Project) GetOrganizationSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationSlug, true
}

// SetOrganizationSlug sets field value
func (o *Project) SetOrganizationSlug(v string) {
	o.OrganizationSlug = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Project) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Project) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Project) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetVcsInfo returns the VcsInfo field value
func (o *Project) GetVcsInfo() ProjectVcsInfo {
	if o == nil {
		var ret ProjectVcsInfo
		return ret
	}

	return o.VcsInfo
}

// GetVcsInfoOk returns a tuple with the VcsInfo field value
// and a boolean to check if the value has been set.
func (o *Project) GetVcsInfoOk() (*ProjectVcsInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VcsInfo, true
}

// SetVcsInfo sets field value
func (o *Project) SetVcsInfo(v ProjectVcsInfo) {
	o.VcsInfo = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slug"] = o.Slug
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	toSerialize["organization_name"] = o.OrganizationName
	toSerialize["organization_slug"] = o.OrganizationSlug
	toSerialize["organization_id"] = o.OrganizationId
	toSerialize["vcs_info"] = o.VcsInfo
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
