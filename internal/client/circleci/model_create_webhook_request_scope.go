/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
)

// checks if the CreateWebhookRequestScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWebhookRequestScope{}

// CreateWebhookRequestScope The scope in which the relevant events that will trigger webhooks
type CreateWebhookRequestScope struct {
	// ID of the scope being used (at the moment, only project ID is supported)
	Id string `json:"id"`
	// Type of the scope being used
	Type string `json:"type"`
}

// NewCreateWebhookRequestScope instantiates a new CreateWebhookRequestScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebhookRequestScope(id string, type_ string) *CreateWebhookRequestScope {
	this := CreateWebhookRequestScope{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewCreateWebhookRequestScopeWithDefaults instantiates a new CreateWebhookRequestScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebhookRequestScopeWithDefaults() *CreateWebhookRequestScope {
	this := CreateWebhookRequestScope{}
	return &this
}

// GetId returns the Id field value
func (o *CreateWebhookRequestScope) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequestScope) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateWebhookRequestScope) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *CreateWebhookRequestScope) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequestScope) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateWebhookRequestScope) SetType(v string) {
	o.Type = v
}

func (o CreateWebhookRequestScope) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWebhookRequestScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCreateWebhookRequestScope struct {
	value *CreateWebhookRequestScope
	isSet bool
}

func (v NullableCreateWebhookRequestScope) Get() *CreateWebhookRequestScope {
	return v.value
}

func (v *NullableCreateWebhookRequestScope) Set(val *CreateWebhookRequestScope) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebhookRequestScope) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebhookRequestScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebhookRequestScope(val *CreateWebhookRequestScope) *NullableCreateWebhookRequestScope {
	return &NullableCreateWebhookRequestScope{value: val, isSet: true}
}

func (v NullableCreateWebhookRequestScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebhookRequestScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
