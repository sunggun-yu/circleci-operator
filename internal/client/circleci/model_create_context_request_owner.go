/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
	"fmt"
)

// CreateContextRequestOwner - struct for CreateContextRequestOwner
type CreateContextRequestOwner struct {
	CreateContextRequestOwnerOneOf  *CreateContextRequestOwnerOneOf
	CreateContextRequestOwnerOneOf1 *CreateContextRequestOwnerOneOf1
}

// CreateContextRequestOwnerOneOfAsCreateContextRequestOwner is a convenience function that returns CreateContextRequestOwnerOneOf wrapped in CreateContextRequestOwner
func CreateContextRequestOwnerOneOfAsCreateContextRequestOwner(v *CreateContextRequestOwnerOneOf) CreateContextRequestOwner {
	return CreateContextRequestOwner{
		CreateContextRequestOwnerOneOf: v,
	}
}

// CreateContextRequestOwnerOneOf1AsCreateContextRequestOwner is a convenience function that returns CreateContextRequestOwnerOneOf1 wrapped in CreateContextRequestOwner
func CreateContextRequestOwnerOneOf1AsCreateContextRequestOwner(v *CreateContextRequestOwnerOneOf1) CreateContextRequestOwner {
	return CreateContextRequestOwner{
		CreateContextRequestOwnerOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateContextRequestOwner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateContextRequestOwnerOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateContextRequestOwnerOneOf)
	if err == nil {
		jsonCreateContextRequestOwnerOneOf, _ := json.Marshal(dst.CreateContextRequestOwnerOneOf)
		if string(jsonCreateContextRequestOwnerOneOf) == "{}" { // empty struct
			dst.CreateContextRequestOwnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.CreateContextRequestOwnerOneOf = nil
	}

	// try to unmarshal data into CreateContextRequestOwnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateContextRequestOwnerOneOf1)
	if err == nil {
		jsonCreateContextRequestOwnerOneOf1, _ := json.Marshal(dst.CreateContextRequestOwnerOneOf1)
		if string(jsonCreateContextRequestOwnerOneOf1) == "{}" { // empty struct
			dst.CreateContextRequestOwnerOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.CreateContextRequestOwnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateContextRequestOwnerOneOf = nil
		dst.CreateContextRequestOwnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateContextRequestOwner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateContextRequestOwner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateContextRequestOwner) MarshalJSON() ([]byte, error) {
	if src.CreateContextRequestOwnerOneOf != nil {
		return json.Marshal(&src.CreateContextRequestOwnerOneOf)
	}

	if src.CreateContextRequestOwnerOneOf1 != nil {
		return json.Marshal(&src.CreateContextRequestOwnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateContextRequestOwner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateContextRequestOwnerOneOf != nil {
		return obj.CreateContextRequestOwnerOneOf
	}

	if obj.CreateContextRequestOwnerOneOf1 != nil {
		return obj.CreateContextRequestOwnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCreateContextRequestOwner struct {
	value *CreateContextRequestOwner
	isSet bool
}

func (v NullableCreateContextRequestOwner) Get() *CreateContextRequestOwner {
	return v.value
}

func (v *NullableCreateContextRequestOwner) Set(val *CreateContextRequestOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateContextRequestOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateContextRequestOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateContextRequestOwner(val *CreateContextRequestOwner) *NullableCreateContextRequestOwner {
	return &NullableCreateContextRequestOwner{value: val, isSet: true}
}

func (v NullableCreateContextRequestOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateContextRequestOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
