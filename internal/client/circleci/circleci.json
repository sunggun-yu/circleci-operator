{
  "openapi": "3.0.0",
  "info": {
    "version": "v2",
    "title": "CircleCI API",
    "description": "This describes the resources that make up the CircleCI API v2.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://circleci.com/api/v2"
    }
  ],
  "security": [
    {
      "api_key_header": []
    },
    {
      "basic_auth": []
    },
    {
      "api_key_query": []
    }
  ],
  "paths": {
    "/context": {
      "post": {
        "summary": "Create a new context",
        "tags": ["Context"],
        "operationId": "createContext",
        "responses": {
          "200": {
            "description": "The new context",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique ID of the context."
                    },
                    "name": {
                      "type": "string",
                      "description": "The user defined name of the context."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the context was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    }
                  },
                  "required": ["id", "name", "created_at"],
                  "title": "Context"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user defined name of the context."
                  },
                  "owner": {
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The unique ID of the owner of the context. Specify either this or slug."
                          },
                          "type": {
                            "enum": ["account", "organization"],
                            "type": "string",
                            "description": "The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.",
                            "example": "organization"
                          }
                        },
                        "required": ["id"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "slug": {
                            "type": "string",
                            "description": "A string that represents an organization. Specify either this or id. Cannot be used for accounts."
                          },
                          "type": {
                            "enum": ["organization"],
                            "type": "string",
                            "description": "The type of owner. Defaults to \"organization\". Accounts are only used as context owners in server and must be specified by an id instead of a slug."
                          }
                        },
                        "required": ["slug"]
                      }
                    ]
                  }
                },
                "required": ["name", "owner"]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://circleci.com/api/v2/context',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {name: 'string', owner: {id: 'string', type: 'organization'}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"owner\\\":{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"organization\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"POST\", \"/api/v2/context\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"owner\\\":{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"organization\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://circleci.com/api/v2/context \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"owner\":{\"id\":\"string\",\"type\":\"organization\"}}'"
          }
        ]
      },
      "get": {
        "summary": "List contexts",
        "description": "List all contexts for an owner.",
        "tags": ["Context"],
        "operationId": "listContexts",
        "responses": {
          "200": {
            "description": "A paginated list of contexts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The unique ID of the context."
                          },
                          "name": {
                            "type": "string",
                            "description": "The user defined name of the context."
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the context was created.",
                            "example": "2015-09-21T17:29:21.042Z"
                          }
                        },
                        "required": ["id", "name", "created_at"],
                        "title": "Context"
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "x-nullable": true,
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results."
                    }
                  },
                  "required": ["items", "next_page_token"]
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "owner-id",
            "description": "The unique ID of the owner of the context. Specify either this or owner-slug.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "owner-slug",
            "description": "A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "owner-type",
            "description": "The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.",
            "schema": {
              "type": "string",
              "enum": ["account", "organization"]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page-token",
            "description": "A token to retrieve the next page of results.",
            "schema": {
              "type": "string"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/context',\n  qs: {\n    'owner-id': 'c65b68ef-e73b-4bf2-be9a-7a322a9df150',\n    'page-token': 'NEXT_PAGE_TOKEN'\n  },\n  headers: {'Circle-Token': 'CIRCLE_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection('circleci.com')\n\nheaders = { 'Circle-Token': 'CIRCLE_TOKEN' }\n\nconn.request('GET', '/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN', headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode('utf-8'))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Circle-Token\", \"CIRCLE_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN' \\\n  --header \"Circle-Token: ${CIRCLE_TOKEN}\""
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI('https://circleci.com/api/v2/context?owner-id=c65b68ef-e73b-4bf2-be9a-7a322a9df150&page-token=NEXT_PAGE_TOKEN')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest['Circle-Token'] = 'CIRCLE_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/context/{context-id}": {
      "get": {
        "summary": "Get a context",
        "description": "Returns basic information about a context.",
        "tags": ["Context"],
        "operationId": "getContext",
        "responses": {
          "200": {
            "description": "The context",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique ID of the context."
                    },
                    "name": {
                      "type": "string",
                      "description": "The user defined name of the context."
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the context was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    }
                  },
                  "required": ["id", "name", "created_at"],
                  "title": "Context"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "context-id",
            "description": "ID of the context (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/context/%7Bcontext-id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/context/%7Bcontext-id%7D \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "delete": {
        "summary": "Delete a context",
        "tags": ["Context"],
        "operationId": "deleteContext",
        "responses": {
          "200": {
            "description": "A confirmation message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable message"
                    }
                  },
                  "required": ["message"],
                  "description": "message response",
                  "title": "MessageResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "context-id",
            "description": "ID of the context (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"DELETE\", \"/api/v2/context/%7Bcontext-id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://circleci.com/api/v2/context/%7Bcontext-id%7D \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/context/{context-id}/environment-variable": {
      "get": {
        "summary": "List environment variables",
        "description": "List information about environment variables in a context, not including their values.",
        "tags": ["Context"],
        "operationId": "listEnvironmentVariablesFromContext",
        "responses": {
          "200": {
            "description": "A paginated list of environment variables",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "variable": {
                            "type": "string",
                            "description": "The name of the environment variable",
                            "example": "POSTGRES_USER"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the environment variable was created.",
                            "example": "2015-09-21T17:29:21.042Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the environment variable was updated",
                            "example": "2015-09-21T17:29:21.042Z"
                          },
                          "context_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the context (UUID)"
                          }
                        },
                        "required": [
                          "variable",
                          "created_at",
                          "updated_at",
                          "context_id"
                        ]
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "x-nullable": true,
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results."
                    }
                  },
                  "required": ["items", "next_page_token"]
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "context-id",
            "description": "ID of the context (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "page-token",
            "description": "A token to retrieve the next page of results.",
            "schema": {
              "type": "string"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable',\n  qs: {'page-token': 'SOME_STRING_VALUE'},\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable?page-token=SOME_STRING_VALUE' \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/context/{context-id}/environment-variable/{env-var-name}": {
      "delete": {
        "summary": "Remove an environment variable",
        "description": "Delete an environment variable from a context.",
        "tags": ["Context"],
        "operationId": "deleteEnvironmentVariableFromContext",
        "responses": {
          "200": {
            "description": "A confirmation message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable message"
                    }
                  },
                  "required": ["message"],
                  "description": "message response",
                  "title": "MessageResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "env-var-name",
            "description": "The name of the environment variable",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "POSTGRES_USER"
          },
          {
            "in": "path",
            "name": "context-id",
            "description": "ID of the context (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"DELETE\", \"/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "put": {
        "summary": "Add or update an environment variable",
        "description": "Create or update an environment variable within a context. Returns information about the environment variable, not including its value.",
        "tags": ["Context"],
        "operationId": "addEnvironmentVariableToContext",
        "responses": {
          "200": {
            "description": "The new environment variable",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "variable": {
                          "type": "string",
                          "description": "The name of the environment variable",
                          "example": "POSTGRES_USER"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date and time the environment variable was created.",
                          "example": "2015-09-21T17:29:21.042Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date and time the environment variable was updated",
                          "example": "2015-09-21T17:29:21.042Z"
                        },
                        "context_id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of the context (UUID)"
                        }
                      },
                      "required": [
                        "variable",
                        "created_at",
                        "updated_at",
                        "context_id"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "A human-readable message"
                        }
                      },
                      "required": ["message"],
                      "description": "message response",
                      "title": "MessageResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "context-id",
            "description": "ID of the context (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "env-var-name",
            "description": "The name of the environment variable",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "POSTGRES_USER"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The value of the environment variable",
                    "example": "some-secret-value"
                  }
                },
                "required": ["value"]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {value: 'some-secret-value'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"value\\\":\\\"some-secret-value\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"PUT\", \"/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"some-secret-value\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://circleci.com/api/v2/context/%7Bcontext-id%7D/environment-variable/POSTGRES_USER \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\":\"some-secret-value\"}'"
          }
        ]
      }
    },
    "/project/{project-slug}": {
      "get": {
        "summary": "Get a project",
        "description": "Retrieves a project by project slug.",
        "tags": ["Project"],
        "operationId": "getProjectBySlug",
        "responses": {
          "200": {
            "description": "A project object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "slug": {
                      "type": "string",
                      "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
                      "example": "gh/CircleCI-Public/api-preview-docs"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the project",
                      "example": "api-preview-docs"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "organization_name": {
                      "type": "string",
                      "description": "The name of the organization the project belongs to",
                      "example": "CircleCI-Public"
                    },
                    "organization_slug": {
                      "type": "string",
                      "description": "The slug of the organization the project belongs to",
                      "example": "CircleCI-Public"
                    },
                    "organization_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the organization the project belongs to",
                      "example": "CircleCI-Public"
                    },
                    "vcs_info": {
                      "type": "object",
                      "properties": {
                        "vcs_url": {
                          "type": "string",
                          "description": "URL to the repository hosting the project's code",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs"
                        },
                        "provider": {
                          "enum": ["Bitbucket", "CircleCI", "GitHub"],
                          "type": "string",
                          "description": "The VCS provider"
                        },
                        "default_branch": {
                          "type": "string",
                          "example": "master"
                        }
                      },
                      "required": ["vcs_url", "provider", "default_branch"],
                      "description": "Information about the VCS that hosts the project source code."
                    }
                  },
                  "required": [
                    "slug",
                    "name",
                    "id",
                    "organization_name",
                    "organization_slug",
                    "organization_id",
                    "vcs_info"
                  ],
                  "description": "NOTE: The definition of Project is subject to change.",
                  "title": "Project"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/project/{project-slug}/checkout-key": {
      "post": {
        "summary": "Create a new checkout key",
        "description": "Creates a new checkout key. This API request is only usable with a user API token.",
        "tags": ["Project"],
        "operationId": "createCheckoutKey",
        "responses": {
          "201": {
            "description": "The checkout key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public-key": {
                      "type": "string",
                      "description": "A public SSH key.",
                      "example": "ssh-rsa ..."
                    },
                    "type": {
                      "enum": ["deploy-key", "github-user-key"],
                      "type": "string",
                      "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                      "title": "CheckoutKeyType",
                      "example": "deploy-key"
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "An SSH key fingerprint.",
                      "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f"
                    },
                    "preferred": {
                      "type": "boolean",
                      "description": "A boolean value that indicates if this key is preferred.",
                      "example": true
                    },
                    "created-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the checkout key was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    }
                  },
                  "required": [
                    "public-key",
                    "type",
                    "fingerprint",
                    "preferred",
                    "created-at"
                  ],
                  "title": "CheckoutKey"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "enum": ["user-key", "deploy-key"],
                    "type": "string",
                    "description": "The type of checkout key to create. This may be either `deploy-key` or `user-key`.",
                    "title": "CheckoutKeyInputType",
                    "example": "deploy-key"
                  }
                },
                "required": ["type"],
                "title": "CheckoutKeyInput"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {type: 'deploy-key'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"type\\\":\\\"deploy-key\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"POST\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key\"\n\n\tpayload := strings.NewReader(\"{\\\"type\\\":\\\"deploy-key\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"type\":\"deploy-key\"}'"
          }
        ]
      },
      "get": {
        "summary": "Get all checkout keys",
        "description": "Returns a sequence of checkout keys for `:project`.",
        "tags": ["Project"],
        "operationId": "listCheckoutKeys",
        "responses": {
          "200": {
            "description": "A sequence of checkout keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "public-key": {
                            "type": "string",
                            "description": "A public SSH key.",
                            "example": "ssh-rsa ..."
                          },
                          "type": {
                            "enum": ["deploy-key", "github-user-key"],
                            "type": "string",
                            "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                            "title": "CheckoutKeyType",
                            "example": "deploy-key"
                          },
                          "fingerprint": {
                            "type": "string",
                            "description": "An SSH key fingerprint.",
                            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f"
                          },
                          "preferred": {
                            "type": "boolean",
                            "description": "A boolean value that indicates if this key is preferred.",
                            "example": true
                          },
                          "created-at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the checkout key was created.",
                            "example": "2015-09-21T17:29:21.042Z"
                          }
                        },
                        "required": [
                          "public-key",
                          "type",
                          "fingerprint",
                          "preferred",
                          "created-at"
                        ],
                        "title": "CheckoutKey"
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "x-nullable": true,
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results."
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "CheckoutKeyListResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/project/{project-slug}/checkout-key/{fingerprint}": {
      "delete": {
        "summary": "Delete a checkout key",
        "description": "Deletes the checkout key.",
        "tags": ["Project"],
        "operationId": "deleteCheckoutKey",
        "responses": {
          "200": {
            "description": "A confirmation message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable message"
                    }
                  },
                  "required": ["message"],
                  "description": "message response",
                  "title": "MessageResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          },
          {
            "in": "path",
            "name": "fingerprint",
            "description": "An SSH key fingerprint.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"DELETE\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "get": {
        "summary": "Get a checkout key",
        "description": "Returns an individual checkout key.",
        "tags": ["Project"],
        "operationId": "getCheckoutKey",
        "responses": {
          "200": {
            "description": "The checkout key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public-key": {
                      "type": "string",
                      "description": "A public SSH key.",
                      "example": "ssh-rsa ..."
                    },
                    "type": {
                      "enum": ["deploy-key", "github-user-key"],
                      "type": "string",
                      "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                      "title": "CheckoutKeyType",
                      "example": "deploy-key"
                    },
                    "fingerprint": {
                      "type": "string",
                      "description": "An SSH key fingerprint.",
                      "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f"
                    },
                    "preferred": {
                      "type": "boolean",
                      "description": "A boolean value that indicates if this key is preferred.",
                      "example": true
                    },
                    "created-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the checkout key was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    }
                  },
                  "required": [
                    "public-key",
                    "type",
                    "fingerprint",
                    "preferred",
                    "created-at"
                  ],
                  "title": "CheckoutKey"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          },
          {
            "in": "path",
            "name": "fingerprint",
            "description": "An SSH key fingerprint.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/checkout-key/c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/project/{project-slug}/envvar": {
      "get": {
        "summary": "List all environment variables",
        "description": "Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.",
        "tags": ["Project"],
        "operationId": "listEnvVars",
        "responses": {
          "200": {
            "description": "A sequence of environment variables.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the environment variable.",
                            "example": "foo"
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the environment variable.",
                            "example": "xxxx1234"
                          }
                        },
                        "required": ["name", "value"],
                        "title": "EnvironmentVariablePair"
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "x-nullable": true,
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results."
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "EnvironmentVariableListResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "post": {
        "summary": "Create an environment variable",
        "description": "Creates a new environment variable.",
        "tags": ["Project"],
        "operationId": "createEnvVar",
        "responses": {
          "201": {
            "description": "The environment variable.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the environment variable.",
                      "example": "foo"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the environment variable.",
                      "example": "xxxx1234"
                    }
                  },
                  "required": ["name", "value"],
                  "title": "EnvironmentVariablePair"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the environment variable.",
                    "example": "foo"
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the environment variable.",
                    "example": "xxxx1234"
                  }
                },
                "required": ["name", "value"],
                "title": "EnvironmentVariablePair"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {name: 'foo', value: 'xxxx1234'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"name\\\":\\\"foo\\\",\\\"value\\\":\\\"xxxx1234\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"POST\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"foo\\\",\\\"value\\\":\\\"xxxx1234\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"foo\",\"value\":\"xxxx1234\"}'"
          }
        ]
      }
    },
    "/project/{project-slug}/envvar/{name}": {
      "get": {
        "summary": "Get a masked environment variable",
        "description": "Returns the masked value of environment variable :name.",
        "tags": ["Project"],
        "operationId": "getEnvVar",
        "responses": {
          "200": {
            "description": "The environment variable.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the environment variable.",
                      "example": "foo"
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the environment variable.",
                      "example": "xxxx1234"
                    }
                  },
                  "required": ["name", "value"],
                  "title": "EnvironmentVariablePair"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          },
          {
            "in": "path",
            "name": "name",
            "description": "The name of the environment variable.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "foo"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "delete": {
        "summary": "Delete an environment variable",
        "description": "Deletes the environment variable named :name.",
        "tags": ["Project"],
        "operationId": "deleteEnvVar",
        "responses": {
          "200": {
            "description": "A confirmation message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable message"
                    }
                  },
                  "required": ["message"],
                  "description": "message response",
                  "title": "MessageResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "project-slug",
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "gh/CircleCI-Public/api-preview-docs",
            "allowReserved": true
          },
          {
            "in": "path",
            "name": "name",
            "description": "The name of the environment variable.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "foo"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"DELETE\", \"/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://circleci.com/api/v2/project/gh/CircleCI-Public/api-preview-docs/envvar/foo \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/webhook": {
      "post": {
        "summary": "Create a webhook",
        "tags": ["Webhook"],
        "operationId": "createWebhook",
        "responses": {
          "201": {
            "description": "A webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                    },
                    "verify-tls": {
                      "type": "boolean",
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique ID of the webhook"
                    },
                    "signing-secret": {
                      "type": "string",
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                    },
                    "updated-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the webhook"
                    },
                    "created-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of the scope being used (at the moment, only project ID is supported)"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the scope being used"
                        }
                      },
                      "required": ["id", "type"],
                      "description": "The scope in which the relevant events that will trigger webhooks"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "description": "Events that will trigger the webhook"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "enum": ["workflow-completed", "job-completed"],
                      "type": "string"
                    },
                    "description": "Events that will trigger the webhook"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                  },
                  "verify-tls": {
                    "type": "boolean",
                    "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                  },
                  "signing-secret": {
                    "type": "string",
                    "description": "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                  },
                  "scope": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the scope being used (at the moment, only project ID is supported)"
                      },
                      "type": {
                        "enum": ["project"],
                        "type": "string",
                        "description": "Type of the scope being used"
                      }
                    },
                    "required": ["id", "type"],
                    "description": "The scope in which the relevant events that will trigger webhooks"
                  }
                },
                "required": [
                  "name",
                  "events",
                  "url",
                  "verify-tls",
                  "signing-secret",
                  "scope"
                ],
                "description": "The parameters for a create webhook request"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://circleci.com/api/v2/webhook',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {\n    name: 'string',\n    events: ['workflow-completed'],\n    url: 'string',\n    'verify-tls': true,\n    'signing-secret': 'string',\n    scope: {id: 'string', type: 'project'}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"verify-tls\\\":true,\\\"signing-secret\\\":\\\"string\\\",\\\"scope\\\":{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"project\\\"}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"POST\", \"/api/v2/webhook\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"verify-tls\\\":true,\\\"signing-secret\\\":\\\"string\\\",\\\"scope\\\":{\\\"id\\\":\\\"string\\\",\\\"type\\\":\\\"project\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://circleci.com/api/v2/webhook \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"events\":[\"workflow-completed\"],\"url\":\"string\",\"verify-tls\":true,\"signing-secret\":\"string\",\"scope\":{\"id\":\"string\",\"type\":\"project\"}}'"
          }
        ]
      },
      "get": {
        "summary": "List webhooks",
        "description": "Get a list of webhook that match the given scope-type and scope-id",
        "tags": ["Webhook"],
        "operationId": "getWebhooks",
        "responses": {
          "200": {
            "description": "A list of webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                          },
                          "verify-tls": {
                            "type": "boolean",
                            "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                          },
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The unique ID of the webhook"
                          },
                          "signing-secret": {
                            "type": "string",
                            "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                          },
                          "updated-at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the webhook was last updated.",
                            "example": "2015-09-21T17:29:21.042Z"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the webhook"
                          },
                          "created-at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time the webhook was created.",
                            "example": "2015-09-21T17:29:21.042Z"
                          },
                          "scope": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid",
                                "description": "ID of the scope being used (at the moment, only project ID is supported)"
                              },
                              "type": {
                                "type": "string",
                                "description": "Type of the scope being used"
                              }
                            },
                            "required": ["id", "type"],
                            "description": "The scope in which the relevant events that will trigger webhooks"
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "enum": ["workflow-completed", "job-completed"],
                              "type": "string"
                            },
                            "description": "Events that will trigger the webhook"
                          }
                        },
                        "required": [
                          "id",
                          "scope",
                          "name",
                          "events",
                          "url",
                          "verify-tls",
                          "signing-secret",
                          "created-at",
                          "updated-at"
                        ],
                        "title": "Webhook"
                      }
                    },
                    "next_page_token": {
                      "type": "string",
                      "x-nullable": true,
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results."
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "description": "A list of webhooks"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "scope-id",
            "description": "ID of the scope being used (at the moment, only project ID is supported)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "scope-type",
            "description": "Type of the scope being used",
            "schema": {
              "type": "string",
              "enum": ["project"]
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/webhook',\n  qs: {'scope-id': 'SOME_STRING_VALUE', 'scope-type': 'SOME_STRING_VALUE'},\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://circleci.com/api/v2/webhook?scope-id=SOME_STRING_VALUE&scope-type=SOME_STRING_VALUE' \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    },
    "/webhook/{webhook-id}": {
      "put": {
        "summary": "Update a webhook",
        "tags": ["Webhook"],
        "operationId": "updateWebhook",
        "responses": {
          "200": {
            "description": "A webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                    },
                    "verify-tls": {
                      "type": "boolean",
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique ID of the webhook"
                    },
                    "signing-secret": {
                      "type": "string",
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                    },
                    "updated-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the webhook"
                    },
                    "created-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of the scope being used (at the moment, only project ID is supported)"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the scope being used"
                        }
                      },
                      "required": ["id", "type"],
                      "description": "The scope in which the relevant events that will trigger webhooks"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "description": "Events that will trigger the webhook"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "webhook-id",
            "description": "ID of the webhook (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "enum": ["workflow-completed", "job-completed"],
                      "type": "string"
                    },
                    "description": "Events that will trigger the webhook"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                  },
                  "signing-secret": {
                    "type": "string",
                    "description": "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                  },
                  "verify-tls": {
                    "type": "boolean",
                    "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                  }
                },
                "description": "The parameters for an update webhook request"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',\n  headers: {'content-type': 'application/json', authorization: 'Basic REPLACE_BASIC_AUTH'},\n  body: {\n    name: 'string',\n    events: ['workflow-completed'],\n    url: 'string',\n    'signing-secret': 'string',\n    'verify-tls': true\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"signing-secret\\\":\\\"string\\\",\\\"verify-tls\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Basic REPLACE_BASIC_AUTH\"\n    }\n\nconn.request(\"PUT\", \"/api/v2/webhook/%7Bwebhook-id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"events\\\":[\\\"workflow-completed\\\"],\\\"url\\\":\\\"string\\\",\\\"signing-secret\\\":\\\"string\\\",\\\"verify-tls\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"events\":[\"workflow-completed\"],\"url\":\"string\",\"signing-secret\":\"string\",\"verify-tls\":true}'"
          }
        ]
      },
      "delete": {
        "summary": "Delete a webhook",
        "tags": ["Webhook"],
        "operationId": "deleteWebhook",
        "responses": {
          "200": {
            "description": "A confirmation message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A human-readable message"
                    }
                  },
                  "required": ["message"],
                  "description": "message response",
                  "title": "MessageResponse"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "webhook-id",
            "description": "ID of the webhook (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"DELETE\", \"/api/v2/webhook/%7Bwebhook-id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      },
      "get": {
        "summary": "Get a webhook",
        "description": "Get a webhook by id.",
        "tags": ["Webhook"],
        "operationId": "getWebhookById",
        "responses": {
          "200": {
            "description": "A webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
                    },
                    "verify-tls": {
                      "type": "boolean",
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook"
                    },
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The unique ID of the webhook"
                    },
                    "signing-secret": {
                      "type": "string",
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
                    },
                    "updated-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the webhook"
                    },
                    "created-at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z"
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "description": "ID of the scope being used (at the moment, only project ID is supported)"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of the scope being used"
                        }
                      },
                      "required": ["id", "type"],
                      "description": "The scope in which the relevant events that will trigger webhooks"
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "description": "Events that will trigger the webhook"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Error response."
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "webhook-id",
            "description": "ID of the webhook (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D',\n  headers: {authorization: 'Basic REPLACE_BASIC_AUTH'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"circleci.com\")\n\nheaders = { 'authorization': \"Basic REPLACE_BASIC_AUTH\" }\n\nconn.request(\"GET\", \"/api/v2/webhook/%7Bwebhook-id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://circleci.com/api/v2/webhook/%7Bwebhook-id%7D \\\n  --header 'authorization: Basic REPLACE_BASIC_AUTH'"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key_header": {
        "type": "apiKey",
        "name": "Circle-Token",
        "in": "header"
      },
      "basic_auth": {
        "description": "HTTP basic authentication. The username should be set as the circle-token value, and the password should be left blank. Note that project tokens are currently not supported on API v2.",
        "type": "http",
        "scheme": "basic"
      },
      "api_key_query": {
        "type": "apiKey",
        "name": "circle-token",
        "in": "query",
        "description": "DEPRECATED - we will remove this option in the future"
      }
    }
  },
  "tags": [
    {
      "name": "Context"
    },
    {
      "name": "Insights"
    },
    {
      "name": "User",
      "x-displayName": "User (Preview)"
    },
    {
      "name": "Pipeline"
    },
    {
      "name": "Job",
      "x-displayName": "Job (Preview)"
    },
    {
      "name": "Workflow"
    },
    {
      "name": "Webhook"
    }
  ]
}
