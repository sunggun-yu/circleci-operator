/*
CircleCI API

This describes the resources that make up the CircleCI API v2.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package circleci

import (
	"encoding/json"
)

// checks if the CreateContextRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateContextRequest{}

// CreateContextRequest struct for CreateContextRequest
type CreateContextRequest struct {
	// The user defined name of the context.
	Name  string                    `json:"name"`
	Owner CreateContextRequestOwner `json:"owner"`
}

// NewCreateContextRequest instantiates a new CreateContextRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateContextRequest(name string, owner CreateContextRequestOwner) *CreateContextRequest {
	this := CreateContextRequest{}
	this.Name = name
	this.Owner = owner
	return &this
}

// NewCreateContextRequestWithDefaults instantiates a new CreateContextRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateContextRequestWithDefaults() *CreateContextRequest {
	this := CreateContextRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateContextRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateContextRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateContextRequest) SetName(v string) {
	o.Name = v
}

// GetOwner returns the Owner field value
func (o *CreateContextRequest) GetOwner() CreateContextRequestOwner {
	if o == nil {
		var ret CreateContextRequestOwner
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CreateContextRequest) GetOwnerOk() (*CreateContextRequestOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CreateContextRequest) SetOwner(v CreateContextRequestOwner) {
	o.Owner = v
}

func (o CreateContextRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateContextRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["owner"] = o.Owner
	return toSerialize, nil
}

type NullableCreateContextRequest struct {
	value *CreateContextRequest
	isSet bool
}

func (v NullableCreateContextRequest) Get() *CreateContextRequest {
	return v.value
}

func (v *NullableCreateContextRequest) Set(val *CreateContextRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateContextRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateContextRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateContextRequest(val *CreateContextRequest) *NullableCreateContextRequest {
	return &NullableCreateContextRequest{value: val, isSet: true}
}

func (v NullableCreateContextRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateContextRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
